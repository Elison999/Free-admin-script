-- Rayfield Admin Script with Fixed Callbacks
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Admin Panel",
   LoadingTitle = "Loading Admin Panel",
   LoadingSubtitle = "by Script Creator",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "AdminPanelConfig",
      FileName = "config"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false
})

-- Global variables
local monitoringChat = false
local monitoringBackpack = false
local targetPlayer = nil
local monitoredPlayers = {}
local selectedAdminCommand = "ban (player name)"
local selectedCombatCommand = "explode (player name)"

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")
local RunService = game:GetService("RunService")

-- Function to execute commands
local function executeCommand(command)
    pcall(function()
        local args = {
            [1] = command
        }
        ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer(unpack(args))
    end)
end

-- Function to execute command on all players
local function executeCommandOnAll(baseCommand)
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local command = baseCommand:gsub("%(player name%)", player.Name)
            executeCommand(command)
        end
    end
end

-- Chat monitoring system
local chatConnection = nil
local function setupChatMonitoring()
    if chatConnection then
        chatConnection:Disconnect()
    end
    
    local function onMessageAdded(message)
        pcall(function()
            if not monitoringChat then return end
            
            local textSource = message.TextSource
            if textSource and textSource.UserId then
                local player = Players:GetPlayerByUserId(textSource.UserId)
                if player and message.Text then
                    -- Detect :cmdbar2 command
                    if string.find(message.Text, ":cmdbar2") then
                        targetPlayer = player
                        executeCommand("uncmdbar2 " .. player.Name)
                        print("Command :uncmdbar2 executed on: " .. player.Name)
                    end
                end
            end
        end)
    end

    -- Connect to chat safely
    pcall(function()
        if TextChatService.ChatInputBarConfiguration.TargetTextChannel then
            chatConnection = TextChatService.ChatInputBarConfiguration.TargetTextChannel.MessageAdded:Connect(onMessageAdded)
        else
            -- Fallback for older chat systems
            for _, channel in pairs(TextChatService:GetChildren()) do
                if channel:IsA("TextChannel") then
                    chatConnection = channel.MessageAdded:Connect(onMessageAdded)
                    break
                end
            end
        end
    end)
end

-- Backpack monitoring system
local backpackConnections = {}
local function setupBackpackMonitoring()
    -- Clean up existing connections
    for _, connection in pairs(backpackConnections) do
        pcall(function() connection:Disconnect() end)
    end
    backpackConnections = {}
    
    local function monitorPlayerBackpack(player)
        if not player or player == Players.LocalPlayer then return end
        
        pcall(function()
            local function checkBackpack()
                if not monitoringBackpack then return end
                
                pcall(function()
                    -- Check backpack
                    local backpack = player:FindFirstChild("Backpack")
                    if backpack then
                        for _, item in pairs(backpack:GetChildren()) do
                            if item:IsA("Tool") or item:IsA("HopperBin") then
                                executeCommand("reset " .. player.Name)
                                Rayfield:Notify({
                                    Title = "Backpack Monitor",
                                    Content = "Reset executed on " .. player.Name .. " (Tool: " .. item.Name .. ")",
                                    Duration = 3,
                                    Image = 4483362458
                                })
                                wait(0.5)
                                return
                            end
                        end
                    end
                    
                    -- Check character for equipped tools
                    local character = player.Character
                    if character then
                        for _, item in pairs(character:GetChildren()) do
                            if item:IsA("Tool") then
                                executeCommand("reset " .. player.Name)
                                Rayfield:Notify({
                                    Title = "Backpack Monitor",
                                    Content = "Reset executed on " .. player.Name .. " (Equipped: " .. item.Name .. ")",
                                    Duration = 3,
                                    Image = 4483362458
                                })
                                wait(0.5)
                                return
                            end
                        end
                    end
                end)
            end
            
            -- Connect to backpack changes
            if player:FindFirstChild("Backpack") then
                table.insert(backpackConnections, player.Backpack.ChildAdded:Connect(checkBackpack))
            end
            
            -- Connect to new backpack creation
            table.insert(backpackConnections, player.ChildAdded:Connect(function(child)
                if child.Name == "Backpack" then
                    table.insert(backpackConnections, child.ChildAdded:Connect(checkBackpack))
                end
            end))
            
            -- Connect to character changes
            table.insert(backpackConnections, player.CharacterAdded:Connect(function(character)
                table.insert(backpackConnections, character.ChildAdded:Connect(checkBackpack))
            end))
            
            if player.Character then
                table.insert(backpackConnections, player.Character.ChildAdded:Connect(checkBackpack))
            end
        end)
    end
    
    -- Monitor all current players
    for _, player in pairs(Players:GetPlayers()) do
        monitorPlayerBackpack(player)
    end
    
    -- Monitor new players
    table.insert(backpackConnections, Players.PlayerAdded:Connect(monitorPlayerBackpack))
end

-- Create tabs content
local MainTab = Window:CreateTab("Main", 4483362458)
local AdminTab = Window:CreateTab("Admin", 4483362458)
local CombatTab = Window:CreateTab("Combat", 4483362458)

-- Main Tab
local chatSection = MainTab:CreateSection("Monitoring Systems")

local chatToggle = MainTab:CreateToggle({
   Name = "Monitor Chat (:cmdbar2 Detection)",
   CurrentValue = false,
   Flag = "ChatMonitor",
   Callback = function(Value)
      monitoringChat = Value
      if Value then
         setupChatMonitoring()
         Rayfield:Notify({
            Title = "Chat Monitor",
            Content = "Chat monitoring activated!",
            Duration = 3,
            Image = 4483362458
         })
      else
         if chatConnection then
            chatConnection:Disconnect()
         end
         Rayfield:Notify({
            Title = "Chat Monitor",
            Content = "Chat monitoring disabled",
            Duration = 3,
            Image = 4483362458
         })
      end
   end,
})

local backpackToggle = MainTab:CreateToggle({
   Name = "Monitor Backpack (Auto Reset on Tools)",
   CurrentValue = false,
   Flag = "BackpackMonitor",
   Callback = function(Value)
      monitoringBackpack = Value
      if Value then
         setupBackpackMonitoring()
         Rayfield:Notify({
            Title = "Backpack Monitor",
            Content = "Backpack monitoring activated!",
            Duration = 3,
            Image = 4483362458
         })
      else
         for _, connection in pairs(backpackConnections) do
            pcall(function() connection:Disconnect() end)
         end
         backpackConnections = {}
         Rayfield:Notify({
            Title = "Backpack Monitor",
            Content = "Backpack monitoring disabled",
            Duration = 3,
            Image = 4483362458
         })
      end
   end,
})

-- Admin Tab
local adminSection = AdminTab:CreateSection("Admin Commands")

local adminDropdown = AdminTab:CreateDropdown({
   Name = "Select Admin Command",
   Options = adminCommands,
   CurrentOption = adminCommands[1],
   Flag = "AdminCommandDropdown",
   Callback = function(Option)
      selectedAdminCommand = Option
   end,
})

local adminExecuteButton = AdminTab:CreateButton({
   Name = "Execute on All Players",
   Callback = function()
      executeCommandOnAll(selectedAdminCommand)
      Rayfield:Notify({
         Title = "Admin Command",
         Content = "Executed: " .. selectedAdminCommand,
         Duration = 3,
         Image = 4483362458
      })
   end,
})

-- Combat Tab
local combatSection = CombatTab:CreateSection("Combat Commands")

local combatDropdown = CombatTab:CreateDropdown({
   Name = "Select Combat Command",
   Options = combatCommands,
   CurrentOption = combatCommands[1],
   Flag = "CombatCommandDropdown",
   Callback = function(Option)
      selectedCombatCommand = Option
   end,
})

local combatExecuteButton = CombatTab:CreateButton({
   Name = "Execute on All Players",
   Callback = function()
      executeCommandOnAll(selectedCombatCommand)
      Rayfield:Notify({
         Title = "Combat Command",
         Content = "Executed: " .. selectedCombatCommand,
         Duration = 3,
         Image = 4483362458
      })
   end,
})

-- Manual command section
local manualSection = MainTab:CreateSection("Manual Commands")

local manualCommand = ""
local manualInput = MainTab:CreateInput({
   Name = "Custom Command",
   PlaceholderText = "Type your command here...",
   RemoveTextAfterFocusLost = false,
   Flag = "ManualCommand",
   Callback = function(Text)
      manualCommand = Text
   end,
})

local manualExecuteButton = MainTab:CreateButton({
   Name = "Execute Manual Command",
   Callback = function()
      if manualCommand and manualCommand ~= "" then
         executeCommand(manualCommand)
         Rayfield:Notify({
            Title = "Manual Command",
            Content = "Executed: " .. manualCommand,
            Duration = 3,
            Image = 4483362458
         })
      else
         Rayfield:Notify({
            Title = "Error",
            Content = "Please enter a command first!",
            Duration = 3,
            Image = 4483362458
         })
      end
   end,
})

-- Information section
local infoSection = MainTab:CreateSection("Instructions")

MainTab:CreateParagraph({
   Title = "Features:",
   Content = "• Chat Monitor: Auto-detects :cmdbar2 and executes :uncmdbar2\n• Backpack Monitor: Auto-resets players when tools are detected\n• Mass Commands: Execute admin/combat commands on all players\n• Manual Commands: Execute custom commands"
})

-- Success notification
Rayfield:Notify({
   Title = "Admin Panel",
   Content = "Script loaded successfully!",
   Duration = 5,
   Image = 4483362458
})

print("=== Rayfield Admin Script Loaded ===")
print("✓ Chat monitoring available")
print("✓ Backpack monitoring available") 
print("✓ Admin commands ready")
print("✓ Combat commands ready")
print("✓ Manual commands ready")
