-- Rayfield Admin Script with Backpack Monitor
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Admin Panel",
   LoadingTitle = "Loading Admin Panel",
   LoadingSubtitle = "by Script Creator",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "AdminPanelConfig",
      FileName = "config"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false
})

-- Global variables
local monitoringChat = false
local monitoringBackpack = false
local targetPlayer = nil
local monitoredPlayers = {}

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")

-- Function to execute commands
local function executeCommand(command)
    local args = {
        [1] = command
    }
    ReplicatedStorage.HDAdminClient.Signals.RequestCommand:InvokeServer(unpack(args))
end

-- Function to execute command on all players
local function executeCommandOnAll(baseCommand)
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local command = baseCommand:gsub("%(player name%)", player.Name)
            executeCommand(command)
        end
    end
end

-- Chat monitoring system
local function setupChatMonitoring()
    local function onMessageAdded(message)
        if not monitoringChat then return end
        
        local textSource = message.TextSource
        if textSource and textSource.UserId then
            local player = Players:GetPlayerByUserId(textSource.UserId)
            if player and message.Text then
                -- Detect :cmdbar2 command
                if message.Text:match("^:cmdbar2") then
                    targetPlayer = player
                    executeCommand("uncmdbar2 " .. player.Name)
                    print("Command :uncmdbar2 executed on: " .. player.Name)
                end
            end
        end
    end

    -- Connect to chat
    if TextChatService.ChatInputBarConfiguration.TargetTextChannel then
        TextChatService.ChatInputBarConfiguration.TargetTextChannel.MessageAdded:Connect(onMessageAdded)
    else
        -- Fallback for older chat systems
        for _, channel in pairs(TextChatService:GetChildren()) do
            if channel:IsA("TextChannel") then
                channel.MessageAdded:Connect(onMessageAdded)
            end
        end
    end
end

-- Backpack monitoring system
local function setupBackpackMonitoring()
    local function monitorPlayerBackpack(player)
        if monitoredPlayers[player] then return end
        
        local function checkBackpack()
            if not monitoringBackpack then return end
            
            local backpack = player:FindFirstChild("Backpack")
            if backpack then
                -- Check for tools/items in backpack
                for _, item in pairs(backpack:GetChildren()) do
                    if item:IsA("Tool") or item:IsA("HopperBin") then
                        executeCommand("reset " .. player.Name)
                        Rayfield:Notify({
                            Title = "Backpack Monitor",
                            Content = "Reset executed on " .. player.Name .. " (Tool detected: " .. item.Name .. ")",
                            Duration = 3,
                            Image = 4483362458
                        })
                        wait(1) -- Prevent spam
                        break
                    end
                end
            end
            
            -- Check character for tools
            local character = player.Character
            if character then
                for _, item in pairs(character:GetChildren()) do
                    if item:IsA("Tool") then
                        executeCommand("reset " .. player.Name)
                        Rayfield:Notify({
                            Title = "Backpack Monitor",
                            Content = "Reset executed on " .. player.Name .. " (Tool equipped: " .. item.Name .. ")",
                            Duration = 3,
                            Image = 4483362458
                        })
                        wait(1) -- Prevent spam
                        break
                    end
                end
            end
        end
        
        -- Monitor backpack changes
        monitoredPlayers[player] = player.ChildAdded:Connect(checkBackpack)
        
        -- Monitor when player gets a backpack
        if player:FindFirstChild("Backpack") then
            player.Backpack.ChildAdded:Connect(checkBackpack)
        else
            player.ChildAdded:Connect(function(child)
                if child.Name == "Backpack" then
                    child.ChildAdded:Connect(checkBackpack)
                end
            end)
        end
        
        -- Monitor character changes
        player.CharacterAdded:Connect(function(character)
            character.ChildAdded:Connect(checkBackpack)
        end)
        
        if player.Character then
            player.Character.ChildAdded:Connect(checkBackpack)
        end
    end
    
    -- Monitor all current players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            monitorPlayerBackpack(player)
        end
    end
    
    -- Monitor new players
    Players.PlayerAdded:Connect(function(player)
        if monitoringBackpack then
            monitorPlayerBackpack(player)
        end
    end)
    
    -- Clean up when players leave
    Players.PlayerRemoving:Connect(function(player)
        if monitoredPlayers[player] then
            monitoredPlayers[player]:Disconnect()
            monitoredPlayers[player] = nil
        end
    end)
end

-- Admin Commands
local adminCommands = {
    "ban (player name)",
    "kick (player name)",
    "mute (player name)",
    "unmute (player name)",
    "tp (player name)",
    "bring (player name)",
    "freeze (player name)",
    "unfreeze (player name)",
    "invisible (player name)",
    "visible (player name)",
    "god (player name)",
    "ungod (player name)",
    "heal (player name)",
    "kill (player name)",
    "respawn (player name)",
    "jail (player name)",
    "unjail (player name)",
    "blind (player name)",
    "unblind (player name)",
    "punish (player name)",
    "unpunish (player name)",
    "walkspeed (player name) 16",
    "jumppower (player name) 50",
    "size (player name) 1"
}

-- Combat Commands
local combatCommands = {
    "explode (player name)",
    "damage (player name)",
    "fire (player name)",
    "unfire (player name)",
    "poison (player name)",
    "unpoison (player name)",
    "stun (player name)",
    "unstun (player name)",
    "ragdoll (player name)",
    "unragdoll (player name)",
    "fling (player name)",
    "trip (player name)",
    "push (player name)",
    "pull (player name)",
    "freeze (player name)",
    "unfreeze (player name)",
    "blind (player name)",
    "flash (player name)",
    "confusion (player name)",
    "shake (player name)",
    "meteor (player name)",
    "lightning (player name)",
    "crush (player name)"
}

-- Create tabs
local MainTab = Window:CreateTab("Main", 4483362458)
local AdminTab = Window:CreateTab("Admin", 4483362458)
local CombatTab = Window:CreateTab("Combat", 4483362458)

-- Main Tab
local chatSection = MainTab:CreateSection("Chat Monitoring")

local chatToggle = MainTab:CreateToggle({
   Name = "Monitor Chat (:cmdbar2)",
   CurrentValue = false,
   Flag = "ChatMonitor",
   Callback = function(Value)
      monitoringChat = Value
      if Value then
         setupChatMonitoring()
         Rayfield:Notify({
            Title = "Chat Monitor",
            Content = "Chat monitoring activated! Detecting :cmdbar2",
            Duration = 3,
            Image = 4483362458
         })
      else
         Rayfield:Notify({
            Title = "Chat Monitor",
            Content = "Chat monitoring disabled",
            Duration = 3,
            Image = 4483362458
         })
      end
   end,
})

local backpackSection = MainTab:CreateSection("Backpack Monitoring")

local backpackToggle = MainTab:CreateToggle({
   Name = "Monitor Backpack (Auto Reset)",
   CurrentValue = false,
   Flag = "BackpackMonitor",
   Callback = function(Value)
      monitoringBackpack = Value
      if Value then
         setupBackpackMonitoring()
         Rayfield:Notify({
            Title = "Backpack Monitor",
            Content = "Backpack monitoring activated! Auto-reset on tool detection",
            Duration = 3,
            Image = 4483362458
         })
      else
         -- Disconnect all monitoring connections
         for player, connection in pairs(monitoredPlayers) do
            if connection then
                connection:Disconnect()
            end
         end
         monitoredPlayers = {}
         Rayfield:Notify({
            Title = "Backpack Monitor",
            Content = "Backpack monitoring disabled",
            Duration = 3,
            Image = 4483362458
         })
      end
   end,
})

-- Admin Tab
local adminSection = AdminTab:CreateSection("Admin Commands")

local selectedAdminCommand = adminCommands[1]
local adminDropdown = AdminTab:CreateDropdown({
   Name = "Select Admin Command",
   Options = adminCommands,
   CurrentOption = adminCommands[1],
   Flag = "AdminCommandDropdown",
   Callback = function(Option)
      selectedAdminCommand = Option
   end,
})

local adminExecuteButton = AdminTab:CreateButton({
   Name = "Execute on All Players",
   Callback = function()
      executeCommandOnAll(selectedAdminCommand)
      Rayfield:Notify({
         Title = "Command Executed",
         Content = "Admin command executed on all: " .. selectedAdminCommand,
         Duration = 3,
         Image = 4483362458
      })
   end,
})

-- Combat Tab
local combatSection = CombatTab:CreateSection("Combat Commands")

local selectedCombatCommand = combatCommands[1]
local combatDropdown = CombatTab:CreateDropdown({
   Name = "Select Combat Command",
   Options = combatCommands,
   CurrentOption = combatCommands[1],
   Flag = "CombatCommandDropdown",
   Callback = function(Option)
      selectedCombatCommand = Option
   end,
})

local combatExecuteButton = CombatTab:CreateButton({
   Name = "Execute on All Players",
   Callback = function()
      executeCommandOnAll(selectedCombatCommand)
      Rayfield:Notify({
         Title = "Command Executed",
         Content = "Combat command executed on all: " .. selectedCombatCommand,
         Duration = 3,
         Image = 4483362458
      })
   end,
})

-- Manual command section
local manualSection = MainTab:CreateSection("Manual Command")

local manualInput = MainTab:CreateInput({
   Name = "Custom Command",
   PlaceholderText = "Type command...",
   RemoveTextAfterFocusLost = false,
   Flag = "ManualCommand",
   Callback = function(Text)
      -- Callback called when text changes
   end,
})

local manualExecuteButton = MainTab:CreateButton({
   Name = "Execute Manual Command",
   Callback = function()
      local command = Rayfield.Flags["ManualCommand"].CurrentValue
      if command and command ~= "" then
         executeCommand(command)
         Rayfield:Notify({
            Title = "Manual Command",
            Content = "Command executed: " .. command,
            Duration = 3,
            Image = 4483362458
         })
      else
         Rayfield:Notify({
            Title = "Error",
            Content = "Please enter a command first!",
            Duration = 3,
            Image = 4483362458
         })
      end
   end,
})

-- Information
local infoSection = MainTab:CreateSection("Information")

MainTab:CreateParagraph({
   Title = "How to use:",
   Content = "1. Enable chat monitoring to auto-detect :cmdbar2\n2. Enable backpack monitoring to auto-reset players with tools\n3. Use dropdowns to select commands\n4. Click 'Execute on All' to apply selected command to all players\n5. Use manual command for custom commands"
})

-- Finish
Rayfield:Notify({
   Title = "Admin Panel",
   Content = "Script loaded successfully!",
   Duration = 5,
   Image = 4483362458
})

print("Rayfield Admin Script loaded!")
print("Chat monitoring: Use toggle to activate")
print("Backpack monitoring: Use toggle to auto-reset players with tools")
print("Commands available in Admin and Combat tabs")
